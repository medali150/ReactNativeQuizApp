import { Response } from 'express';
import OpenAI from 'openai';
import { AuthRequest } from '../middleware/auth';

// @desc    Generate quiz using AI
// @route   POST /api/quizzes/generate
// @access  Private/Admin
export const generateQuizWithAI = async (req: AuthRequest, res: Response) => {
  try {
    // Initialize Groq client (using correct env variable)
    const apiKey = process.env.GROQ_API_KEY || '';
    const baseURL = 'https://api.groq.com/openai/v1';
    const model = process.env.AI_MODEL || 'llama-3.3-70b-versatile';

    console.log('AI Configuration:', {
      hasApiKey: !!apiKey,
      apiKeyPrefix: apiKey ? `${apiKey.substring(0, 10)}...` : 'MISSING',
      baseURL,
      model,
    });

    if (!apiKey || apiKey === 'your_groq_api_key_here') {
      return res.status(401).json({
        success: false,
        message: 'AI API key not configured. Please add your GROQ_API_KEY to the .env file.',
      });
    }

    const client = new OpenAI({
      apiKey,
      baseURL,
    });

    const { topic, category, difficulty, numberOfQuestions } = req.body;

    // Validation
    if (!topic) {
      return res.status(400).json({
        success: false,
        message: 'Please provide a topic for the quiz',
      });
    }

    const questionsCount = numberOfQuestions || 5;
    const quizDifficulty = difficulty || 'Medium';
    const quizCategory = category || 'General Knowledge';

    // Create prompt for AI
    const prompt = `Generate a quiz about "${topic}" with the following specifications:
- Category: ${quizCategory}
- Difficulty: ${quizDifficulty}
- Number of questions: ${questionsCount}

Please generate a quiz in the following JSON format:
{
  "title": "Quiz title based on the topic",
  "description": "Brief description of the quiz",
  "category": "${quizCategory}",
  "difficulty": "${quizDifficulty}",
  "questions": [
    {
      "questionText": "The question text",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correctAnswer": 0
    }
  ]
}

Requirements:
- Make questions clear and educational
- Ensure all options are plausible
- The correctAnswer should be the index (0-3) of the correct option
- Questions should be appropriate for ${quizDifficulty} difficulty level
- Generate exactly ${questionsCount} questions

Return ONLY the JSON object, no additional text.`;

    // Call Groq API (using OpenAI-compatible endpoint)
    const completion = await client.chat.completions.create({
      model, // Use the model from env (e.g., llama-3.3-70b-versatile, mixtral-8x7b-32768)
      messages: [
        {
          role: 'system',
          content: 'You are a quiz generator expert. Generate educational and engaging quiz questions in valid JSON format only.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
      max_tokens: 2000,
    });

    const aiResponse = completion.choices[0].message.content;

    if (!aiResponse) {
      return res.status(500).json({
        success: false,
        message: 'Failed to generate quiz from AI',
      });
    }

    // Parse AI response
    let quizData;
    try {
      // Remove markdown code blocks if present
      const cleanedResponse = aiResponse
        .replace(/```json\n?/g, '')
        .replace(/```\n?/g, '')
        .trim();
      
      quizData = JSON.parse(cleanedResponse);
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError);
      return res.status(500).json({
        success: false,
        message: 'Failed to parse AI-generated quiz',
        details: aiResponse,
      });
    }

    // Validate the generated quiz structure
    if (!quizData.title || !quizData.questions || !Array.isArray(quizData.questions)) {
      return res.status(500).json({
        success: false,
        message: 'Invalid quiz structure generated by AI',
      });
    }

    // Add metadata
    quizData.timeLimit = questionsCount * 2; // 2 minutes per question
    quizData.generatedByAI = true;

    res.status(200).json({
      success: true,
      data: quizData,
      message: 'Quiz generated successfully using AI',
    });
  } catch (error: any) {
    console.error('AI Quiz Generation Error:', error);
    
    if (error.status === 401 || error.status === 403) {
      return res.status(401).json({
        success: false,
        message: 'Invalid Groq API key. Please configure your API key from https://console.groq.com/keys',
      });
    }

    res.status(500).json({
      success: false,
      message: error.message || 'Failed to generate quiz with AI',
      error: process.env.NODE_ENV === 'development' ? error.toString() : undefined,
    });
  }
};

// @desc    Get AI generation status (check if API key is configured)
// @route   GET /api/quizzes/ai-status
// @access  Private/Admin
export const getAIStatus = async (req: AuthRequest, res: Response) => {
  try {
    const hasApiKey = !!process.env.GROQ_API_KEY && 
                      process.env.GROQ_API_KEY.length > 0 &&
                      process.env.GROQ_API_KEY !== 'your_groq_api_key_here';

    const model = process.env.AI_MODEL || 'llama-3.3-70b-versatile';

    res.status(200).json({
      success: true,
      data: {
        enabled: hasApiKey,
        model: hasApiKey ? model : null,
        provider: 'Groq',
        message: hasApiKey 
          ? `AI quiz generation is enabled using ${model}` 
          : 'Groq API key not configured. Add GROQ_API_KEY to your .env file. Get your key from https://console.groq.com/keys',
      },
    });
  } catch (error: any) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};
